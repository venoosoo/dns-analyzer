import dns.resolver
import dns.exception
import time
import logging

# ===== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è =====
logging.basicConfig(
    level=logging.INFO,
    format='%(message)s',
    handlers=[
        # –î–ª—è –Ω–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è –ª–æ–≥—ñ–≤ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞ mode='a'
        logging.FileHandler("dns_output.txt", mode='a', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

# ===== –°–ø–∏—Å–æ–∫ –∫–æ—Ä–µ–Ω–µ–≤–∏—Ö —Å–µ—Ä–≤–µ—Ä—ñ–≤ (root hints) =====
ROOT_SERVERS = [
    '198.41.0.4',    # a.root-servers.net
    '199.9.14.201',  # b.root-servers.net
    '192.33.4.12',   # c.root-servers.net
    # ... –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∑–∞–ª–∏—à–æ–∫ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏
]


def query_tld_ns(domain):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ñ NS –¥–ª—è –¥–æ–º–µ–Ω—É —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω–∏–π —Ä–µ–∑–æ–ª–≤–µ—Ä"""
    tld = domain.split('.')[-1]
    logging.info(f"\nüîé –û—Ç—Ä–∏–º–∞–Ω–Ω—è NS-—Å–µ—Ä–≤–µ—Ä—ñ–≤ –¥–ª—è TLD: .{tld}")
    start = time.time()
    try:
        answers = dns.resolver.resolve(domain, 'NS')
        elapsed = round(time.time() - start, 3)
        ns_list = [str(r.target).rstrip('.') for r in answers]
        logging.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(ns_list)} NS –∑–∞ {elapsed} —Å–µ–∫:")
        for ns in ns_list:
            logging.info(f" - {ns}")
        return ns_list
    except dns.resolver.NXDOMAIN:
        logging.error(f"‚ùå –î–æ–º–µ–Ω {domain} –Ω–µ —ñ—Å–Ω—É—î (NXDOMAIN)")
    except dns.exception.DNSException as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ DNS: {e}")
    return []


def resolve_ns_ips(ns_list):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ IPv4 —Ç–∞ IPv6 –∞–¥—Ä–µ—Å–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ NS"""
    ns_ips = {}
    for ns in ns_list:
        ips = []
        for rtype in ('A', 'AAAA'):
            try:
                answers = dns.resolver.resolve(ns, rtype, raise_on_no_answer=False)
                if answers.rrset:
                    for r in answers:
                        ips.append(r.address)
            except dns.exception.DNSException as e:
                logging.warning(f"‚ö†Ô∏è {rtype}-–∑–∞–ø–∏—Ç –¥–æ {ns} –¥–∞–≤ –ø–æ–º–∏–ª–∫—É: {e}")
        if ips:
            ns_ips[ns] = ips
        else:
            logging.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∂–æ–¥–Ω–æ—ó IP –¥–ª—è {ns}")
    return ns_ips


def query_records(domain, ns_ips):
    """–ó–∞–ø–∏—Ç—É–≤–∞—Ç–∏ —Ä—ñ–∑–Ω—ñ DNS-–∑–∞–ø–∏—Å–∏ —É –∫–æ–∂–Ω–æ–≥–æ NS"""
    record_types = ['A', 'AAAA', 'MX', 'TXT', 'SOA', 'CAA']

    for ns, ips in ns_ips.items():
        for ip in ips:
            logging.info(f"\nüñ•Ô∏è –ó–∞–ø–∏—Ç–∏ –¥–æ {ns} ({ip})")
            resolver = dns.resolver.Resolver(configure=False)
            resolver.nameservers = [ip]
            for rtype in record_types:
                logging.info(f"üì• {rtype}-–∑–∞–ø–∏—Å –¥–ª—è {domain}")
                start = time.time()
                try:
                    response = resolver.resolve(domain, rtype, raise_on_no_answer=False)
                    elapsed = round(time.time() - start, 3)
                    if response.rrset:
                        logging.info(f"‚úÖ {rtype} –æ—Ç—Ä–∏–º–∞–Ω–æ –∑–∞ {elapsed} —Å–µ–∫")
                        for r in response:
                            if rtype == 'TXT':
                                texts = [s.decode() for s in r.strings]
                                logging.info(f"üìÑ TXT: {', '.join(texts)}")
                            elif rtype in ('A', 'AAAA'):
                                logging.info(f"üìÑ {rtype}: {r.address}")
                            elif rtype == 'MX':
                                logging.info(f"üìÑ MX: {r.exchange}, –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: {r.preference}")
                            elif rtype == 'SOA':
                                logging.info(f"üìÑ SOA: {r.mname} {r.rname} (ser: {r.serial})")
                            elif rtype == 'CAA':
                                logging.info(f"üìÑ CAA: {r.flags} {r.tag} {r.value}")
                    else:
                        logging.info(f"‚ÑπÔ∏è –ó–∞–ø–∏—Å—ñ–≤ —Ç–∏–ø—É {rtype} –Ω–µ–º–∞—î")
                except dns.resolver.NoAnswer:
                    logging.info(f"‚ÑπÔ∏è –ù–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è {rtype}")
                except dns.resolver.NXDOMAIN:
                    logging.error(f"‚ùå NXDOMAIN –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ {rtype}")
                except dns.exception.Timeout:
                    logging.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ {rtype}")
                except Exception as e:
                    logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ {rtype}: {e}")


def analyze_domain(domain):
    start_time = time.time()
    logging.info(f"üîç –ü–æ—á–∞—Ç–æ–∫ –∞–Ω–∞–ª—ñ–∑—É –¥–æ–º–µ–Ω—É: {domain}")

    # 1. –û—Ç—Ä–∏–º—É—î–º–æ NS-–∑–∞–ø–∏—Å–∏
    authoritative_ns = query_tld_ns(domain)
    if not authoritative_ns:
        return

    # 2. –û—Ç—Ä–∏–º—É—î–º–æ IP NS
    ns_ips = resolve_ns_ips(authoritative_ns)
    if not ns_ips:
        return

    # 3. –ó–∞–ø–∏—Ç—É—î–º–æ DNS-–∑–∞–ø–∏—Å–∏ –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó TCP
    query_records(domain, ns_ips)

    logging.info(f"‚è±Ô∏è –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å: {round(time.time() - start_time, 3)} —Å–µ–∫")


if __name__ == '__main__':
    site = input("–í–≤–µ–¥—ñ—Ç—å –¥–æ–º–µ–Ω –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É: ")
    analyze_domain(site)
